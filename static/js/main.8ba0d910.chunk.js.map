{"version":3,"sources":["models/Task.js","components/TaskInput.js","components/TaskItem.js","contexts/ThemeContext.js","constants/colors.js","components/TasksList.js","components/TaskSearch.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["Task","text","id","this","status","isDisplayed","TaskInput","props","addButtonListener","inputListener","inputValue","keyPress","className","type","value","onChange","placeholder","onKeyDown","onClick","TaskItem","task","markDoneListener","deleteListener","checked","e","ThemeContext","React","createContext","darkTheme","LIGHT_HEADER","background","TasksList","tasks","wrapper","filter","map","key","slice","Consumer","style","backgroundColor","color","TaskSearch","searchValue","searchListener","filterListener","themeListener","size","App","state","newList","push","length","setState","keyCode","target","newTask","includes","statusesToFilter","changeTheme","Provider","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ba0d910.chunk.js","sourcesContent":["export default function Task( text, id ) {\n\tthis.id = id;\n\tthis.status = 'New';\n\tthis.text = text;\n\tthis.isDisplayed = true;\n}\n","import React from 'react';\nimport '../styles/TaskInput.css';\n\nexport default function TaskInput( props ) {\n\tconst {\n\t\taddButtonListener, inputListener, inputValue, keyPress,\n\t} = props;\n\treturn (\n\t\t<div className=\"task-input\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={inputListener}\n\t\t\t\tplaceholder=\"Take a Note\"\n\t\t\t\tonKeyDown={keyPress}\n\t\t\t></input>\n\t\t\t<button onClick={addButtonListener}>Add</button>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport '../styles/TaskItem.css';\n\nexport default function TaskItem( props ) {\n\tconst { status, id, text } = props.task;\n\tconst { markDoneListener, deleteListener } = props;\n\treturn (\n\t\t<div className=\"list-item\">\n\t\t\t<input\n\t\t\t\tchecked={status === 'Done' }\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tonChange={( e ) => markDoneListener( id )}\n\t\t\t/>\n\t\t\t<li className={`${ status === 'Done' ? 'done' : '' }`}>{text}</li>\n\t\t\t<button onClick={( e ) => deleteListener( id )}>X</button>\n\t\t</div>\n\t);\n}\n","import React from 'react';\n\nconst ThemeContext = React.createContext( {\n\tdarkTheme: true,\n} );\n\nexport default ThemeContext;\n","export const DARK_HEADER = '#20232a';\nexport const DARK_BODY = '#282c34';\nexport const DARK_COLOR = '#ffffff';\n\nexport const LIGHT_HEADER = {\n\tbackground: 'linear-gradient(to right, #654ea3, #eaafc8)',\n};\nexport const LIGHT_BODY = '#ffffff';\nexport const LIGHT_COLOR = '#000000';\n","import React from 'react';\nimport TaskItem from './TaskItem.js';\nimport ThemeContext from '../contexts/ThemeContext.js';\nimport {\n\tDARK_BODY, DARK_COLOR, LIGHT_COLOR, LIGHT_BODY,\n} from '../constants/colors.js';\n\nexport default function TasksList( props ) {\n\tconst { tasks, markDoneListener, deleteListener } = props;\n\tconst wrapper = tasks\n\t\t.filter( ( task ) => task.status !== 'Deleted' && task.isDisplayed )\n\t\t.map( ( task ) => (\n\t\t\t<TaskItem\n\t\t\t\tkey={task.text.slice( 0, 5 ) + task.id}\n\t\t\t\ttask={task}\n\t\t\t\tmarkDoneListener={markDoneListener}\n\t\t\t\tdeleteListener={deleteListener}\n\t\t\t/>\n\t\t) );\n\treturn (\n\t\t<ThemeContext.Consumer>\n\t\t\t{ ( darkTheme ) => ( <div className=\"tasks-list\" style={darkTheme ? { backgroundColor: DARK_BODY, color: DARK_COLOR } : { backgroundColor: LIGHT_BODY, color: LIGHT_COLOR } }>\n\t\t\t\t{wrapper}\n\t\t\t</div> )\n\t\t\t}\n\t\t</ThemeContext.Consumer>\n\t);\n}\n","import React from 'react';\nimport DarkModeToggle from 'react-dark-mode-toggle';\nimport ThemeContext from '../contexts/ThemeContext.js';\nimport '../styles/TaskSearch.css';\n\nexport default function TaskSearch( props ) {\n\tconst {\n\t\tsearchValue, searchListener, filter, filterListener, themeListener,\n\t} = props;\n\n\treturn (\n\t\t<ThemeContext.Consumer>\n\t\t\t{ ( darkTheme ) => (\n\t\t\t\t<div className=\"search\">\n\t\t\t\t\t<div onClick={( e ) => filterListener( 'New, Done' )} className={ filter === 'New, Done' ? 'active' : '' } >All</div>\n\t\t\t\t\t<div onClick={( e ) => filterListener( 'New' )} className={ filter === 'New' ? 'active' : '' }>Active</div>\n\t\t\t\t\t<div onClick={( e ) => filterListener( 'Done' )} className={ filter === 'Done' ? 'active' : '' }>Done</div>\n\t\t\t\t\t<input placeholder=\"Search Task\" type=\"search\" value={searchValue} onChange={searchListener}/>\n\t\t\t\t\t<DarkModeToggle\n\t\t\t\t\t\tonChange={themeListener}\n\t\t\t\t\t\tchecked={darkTheme}\n\t\t\t\t\t\tsize={64}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</ThemeContext.Consumer>\n\t);\n}\n","import React from 'react';\nimport Task from './models/Task.js';\nimport './styles/App.css';\nimport TaskInput from './components/TaskInput.js';\nimport TaskList from './components/TasksList.js';\nimport TaskSearch from './components/TaskSearch.js';\nimport ThemeContext from './contexts/ThemeContext.js';\nimport {\n\tDARK_BODY, LIGHT_BODY, DARK_HEADER, LIGHT_HEADER,\n} from './constants/colors.js';\n\nexport default class App extends React.Component {\n\n\tstate = {\n\t\ttasks: [\n\t\t\tnew Task(\n\t\t\t\t'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Maxime, ullam!', // cspell:disable-line\n\t\t\t\t0,\n\t\t\t),\n\t\t\tnew Task(\n\t\t\t\t'officiis quaerat quas quibusdam enim corporis et, accusamus molestias dolor est odit laboriosam delectus omnis voluptates vero aperiam sequi doloremque maxime laudantium perspiciatis inventore eaque. ', // cspell:disable-line\n\t\t\t\t1,\n\t\t\t),\n\t\t],\n\t\tinputValue: '',\n\t\tsearchValue: '',\n\t\tfilter: 'New, Done',\n\t\tdarkTheme: true,\n\t};\n\n\taddButtonListener = () => {\n\t\tconst newList = [...this.state.tasks];\n\t\tnewList.push( new Task( this.state.inputValue, this.state.tasks.length ) );\n\t\tthis.setState( { inputValue: '', tasks: newList } );\n\t};\n\n\tkeyPress = ( e ) => {\n\t\tif ( e.keyCode === 13 ) {\n\t\t\tthis.addButtonListener( e );\n\t\t}\n\t};\n\n\tinputListener = ( e ) => {\n\t\tthis.setState( { inputValue: e.target.value } );\n\t};\n\n\tsearchListener = ( e ) => {\n\t\tconst newList = this.state.tasks.map( ( task ) => {\n\t\t\tconst newTask = { ...task };\n\t\t\tnewTask.text.includes( e.target.value )\n\t\t\t\t? newTask.isDisplayed = true\n\t\t\t\t: newTask.isDisplayed = false;\n\t\t\treturn newTask;\n\t\t} );\n\t\tthis.setState( {\n\t\t\ttasks: newList,\n\t\t\tfilter: 'New, Done',\n\t\t\tsearchValue: e.target.value,\n\t\t} );\n\t}\n\n\tfilterListener = ( statusesToFilter ) => {\n\t\tconst newList = this.state.tasks.map( ( task ) => {\n\t\t\tconst newTask = { ...task };\n\t\t\tstatusesToFilter.includes( newTask.status )\n\t\t\t\t? newTask.isDisplayed = true\n\t\t\t\t: newTask.isDisplayed = false;\n\t\t\treturn newTask;\n\t\t} );\n\t\tthis.setState( {\n\t\t\tsearchValue: '',\n\t\t\ttasks: newList,\n\t\t\tfilter: statusesToFilter,\n\t\t} );\n\t}\n\n\tmarkDoneListener = ( id ) => {\n\t\tconst newList = [...this.state.tasks];\n\t\tnewList[id].status === 'New' ? newList[id].status = 'Done' : newList[id].status = 'New';\n\t\tthis.setState( { tasks: newList } );\n\t};\n\n\tdeleteListener = ( id ) => {\n\t\tconst newList = [...this.state.tasks];\n\t\tnewList[id].status = 'Deleted';\n\t\tthis.setState( { tasks: newList } );\n\t};\n\n\tchangeTheme = () => {\n\t\tthis.setState( {\n\t\t\tdarkTheme: !this.state.darkTheme,\n\t\t} );\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<ThemeContext.Provider value={this.state.darkTheme}>\n\t\t\t\t<div className=\"App\" style={this.state.darkTheme ? { backgroundColor: DARK_BODY } : { backgroundColor: LIGHT_BODY } }>\n\t\t\t\t\t<header style={this.state.darkTheme ? { backgroundColor: DARK_HEADER } : LIGHT_HEADER }>\n\t\t\t\t\t\t<TaskInput\n\t\t\t\t\t\t\tinputValue={this.state.inputValue}\n\t\t\t\t\t\t\taddButtonListener={this.addButtonListener}\n\t\t\t\t\t\t\tinputListener={this.inputListener}\n\t\t\t\t\t\t\tkeyPress={this.keyPress}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TaskSearch\n\t\t\t\t\t\t\tfilter={this.state.filter}\n\t\t\t\t\t\t\tfilterListener={this.filterListener}\n\t\t\t\t\t\t\tsearchValue={this.state.searchValue}\n\t\t\t\t\t\t\tsearchListener={this.searchListener}\n\t\t\t\t\t\t\tthemeListener={this.changeTheme}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</header>\n\t\t\t\t\t<TaskList\n\t\t\t\t\t\tmarkDoneListener={this.markDoneListener}\n\t\t\t\t\t\tdeleteListener={this.deleteListener}\n\t\t\t\t\t\ttasks={this.state.tasks}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</ThemeContext.Provider>\n\t\t);\n\t}\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}